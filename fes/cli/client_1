using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using ChatDefine;

namespace client
{
    class client
    {
        
        static void Main(string[] args)
        {
            IPAddress serip = IPAddress.Parse("127.0.0.1");
            IPEndPoint serep = new IPEndPoint(serip, 50001);

            Console.WriteLine("Create Socket");
            Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            

            sock.Connect(serep);
            Console.WriteLine("Connect to Server : " + sock.RemoteEndPoint);

            while (true)
            {
                //Get message from console

                byte[] message = new byte[1024];    //max message size

                if (inputMsg.CompareTo("exit") == 0)
                {
                    break;
                }

                Array.Copy(Encoding.UTF8.GetBytes(inputMsg), message, Encoding.UTF8.GetBytes(inputMsg).Length);


                //Send message to Server
                ChatProtocol CP = new ChatProtocol();
                CP.command = 0;
                CP.valueA = 10;
                CP.valueB = message;

               

                //Receive from Server
                byte[] rcvBuff = new byte[1024];
                int rcvByteNum = 0;
                //rcvByteNum = sock.Receive(rcvBuff, SocketFlags.None);
                //Console.WriteLine("From server : " + Encoding.UTF8.GetString(rcvBuff, 0, rcvByteNum));
            }

            sock.Close();
        }//main ends

        public string Input() {

            string inputMsg;

            inputMsg = Console.ReadLine();

            return inputMsg;
        }

        public void GetCommandInLobby() {

            string input = Input().ToUpper();

            switch (input)
            {
                case "LIST" :
                    break;

                case "CREATE":
                    break;

                case "LOGIN":
                    break;

                case "LOGOUT":
                    break;

                case "JOIN":
                    break;

                case "LEAVE":
                    break;

            }
        }


        public void GetCommandInRoom()
        {
            string input = Input().ToUpper();

            switch (input)
            {

                case "LEAVE":
                    break;

            }
        }

        public void GetCommandInLogIN()
        {
            string input = Input().ToUpper();

            switch (input)
            {

                case "LOGIN" :
                    break;

                case "EXIT":
                    break;

            }

        }


        public void SendPacket(ChatProtocol CP, Socket s) {

            byte[] data = StructureToByte(CP);

            s.Send(data, 0, data.Length, SocketFlags.None);
        }
        
        

        public void LogIInUI() {

            Console.WriteLine("==========================================================");
            Console.WriteLine("================Welcome to the POCKETCHAT!!===============");
            Console.WriteLine("==========================================================");
            Console.WriteLine("==========================LogIn===========================");
            Console.WriteLine("Enter your ID and PW");
        }


    
        public void MainUI() {

            Console.WriteLine("==========================================================");
            Console.WriteLine("=====================POCKETCHAT ver1.0====================");
            Console.WriteLine("==========================================================");
            Console.WriteLine("===========LIST===========CREATE==========LOGOUT==========");
        }



        public void MessageToserver(Socket s)
        {
            
        }



        public static byte[] StructureToByte(object obj)
        {
            int datasize = Marshal.SizeOf(obj);//((PACKET_DATA)obj).TotalBytes; // 구조체에 할당된 메모리의 크기를 구한다.
            IntPtr buff = Marshal.AllocHGlobal(datasize); // 비관리 메모리 영역에 구조체 크기만큼의 메모리를 할당한다.
            Marshal.StructureToPtr(obj, buff, false); // 할당된 구조체 객체의 주소를 구한다.
            byte[] data = new byte[datasize]; // 구조체가 복사될 배열
            Marshal.Copy(buff, data, 0, datasize); // 구조체 객체를 배열에 복사
            Marshal.FreeHGlobal(buff); // 비관리 메모리 영역에 할당했던 메모리를 해제함
            return data; // 배열을 리턴
        }
    }
}
